{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Constants from 'expo-constants';\nimport axios from 'axios';\nimport langdetect from 'langdetect';\nimport translate from 'google-translate-api';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ChatBot() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    input = _useState2[0],\n    setInput = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    messages = _useState4[0],\n    setMessages = _useState4[1];\n  var addMessage = function addMessage(text, isUser) {\n    setMessages(function (prevMessages) {\n      return [].concat(_toConsumableArray(prevMessages), [{\n        text: text,\n        isUser: isUser\n      }]);\n    });\n  };\n  var handleSendMessage = function () {\n    var _ref = _asyncToGenerator(function* () {\n      if (input.trim() === '') return;\n      addMessage(input, true);\n      try {\n        var detectedLanguage = langdetect.detect(input);\n        var response = yield axios.post('https://api.openai.com/v1/engines/davinci/completions', {\n          prompt: input,\n          max_tokens: 50\n        }, {\n          headers: {\n            'Authorization': `Bearer ${Constants.manifest.extra.OPENAI_API_KEY}`\n          }\n        });\n        var botReply = response.data.choices[0].text;\n        var translatedReply = yield translate(botReply, {\n          from: 'en',\n          to: detectedLanguage,\n          text: botReply\n        });\n        addMessage(translatedReply.text, false);\n        setInput('');\n      } catch (error) {\n        console.error(error);\n      }\n    });\n    return function handleSendMessage() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: 20\n    },\n    children: [_jsx(Text, {\n      children: \"Chat with the ChatBot\"\n    }), _jsx(FlatList, {\n      data: messages,\n      keyExtractor: function keyExtractor(item, index) {\n        return index.toString();\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(View, {\n          style: {\n            flexDirection: item.isUser ? 'row-reverse' : 'row'\n          },\n          children: _jsx(View, {\n            style: {\n              padding: 10,\n              margin: 5,\n              borderRadius: 10,\n              backgroundColor: item.isUser ? '#007BFF' : '#E5E5EA'\n            },\n            children: _jsx(Text, {\n              style: {\n                color: item.isUser ? 'white' : 'black'\n              },\n              children: item.text\n            })\n          })\n        });\n      }\n    }), _jsx(TextInput, {\n      placeholder: \"Type your message...\",\n      value: input,\n      onChangeText: function onChangeText(text) {\n        return setInput(text);\n      },\n      style: {\n        width: '100%',\n        height: 40,\n        borderColor: 'gray',\n        borderWidth: 1,\n        marginTop: 10,\n        marginBottom: 10,\n        padding: 5\n      }\n    }), _jsx(Button, {\n      title: \"Send\",\n      onPress: handleSendMessage\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","Text","TextInput","Button","View","FlatList","Constants","axios","langdetect","translate","jsx","_jsx","jsxs","_jsxs","ChatBot","_useState","_useState2","_slicedToArray","input","setInput","_useState3","_useState4","messages","setMessages","addMessage","text","isUser","prevMessages","concat","_toConsumableArray","handleSendMessage","_ref","_asyncToGenerator","trim","detectedLanguage","detect","response","post","prompt","max_tokens","headers","manifest","extra","OPENAI_API_KEY","botReply","data","choices","translatedReply","from","to","error","console","apply","arguments","style","flex","justifyContent","alignItems","padding","children","keyExtractor","item","index","toString","renderItem","_ref2","flexDirection","margin","borderRadius","backgroundColor","color","placeholder","value","onChangeText","width","height","borderColor","borderWidth","marginTop","marginBottom","title","onPress"],"sources":["/home/nathnael/Documents/Refugee-App/client/screens/chatBot.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect } from 'react';\nimport { Text, TextInput, Button, View, FlatList } from 'react-native';\nimport Constants from 'expo-constants';\nimport axios from 'axios';\nimport langdetect from 'langdetect';\nimport translate from 'google-translate-api';\n\nexport default function ChatBot() {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  const addMessage = (text, isUser) => {\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      {\n        text,\n        isUser,\n      },\n    ]);\n  };\n\n  const handleSendMessage = async () => {\n    if (input.trim() === '') return;\n\n    addMessage(input, true);\n\n    try {\n      // Detect the language of the input message\n      const detectedLanguage = langdetect.detect(input);\n      \n      const response = await axios.post(\n        'https://api.openai.com/v1/engines/davinci/completions',\n        {\n          prompt: input,\n          max_tokens: 50,\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${Constants.manifest.extra.OPENAI_API_KEY}`,\n          },\n        }\n      );\n\n      const botReply = response.data.choices[0].text;\n\n      // Translate the bot reply to the detected language\n      const translatedReply = await translate(botReply, {\n        from: 'en', // Source language (English)\n        to: detectedLanguage, // Target language detected from user input\n        text: botReply,\n      });\n\n      addMessage(translatedReply.text, false);\n      setInput('');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', padding: 20 }}>\n      <Text>Chat with the ChatBot</Text>\n      <FlatList\n        data={messages}\n        keyExtractor={(item, index) => index.toString()}\n        renderItem={({ item }) => (\n          <View style={{ flexDirection: item.isUser ? 'row-reverse' : 'row' }}>\n            <View\n              style={{\n                padding: 10,\n                margin: 5,\n                borderRadius: 10,\n                backgroundColor: item.isUser ? '#007BFF' : '#E5E5EA',\n              }}>\n              <Text style={{ color: item.isUser ? 'white' : 'black' }}>{item.text}</Text>\n            </View>\n          </View>\n        )}\n      />\n      <TextInput\n        placeholder=\"Type your message...\"\n        value={input}\n        onChangeText={(text) => setInput(text)}\n        style={{\n          width: '100%',\n          height: 40,\n          borderColor: 'gray',\n          borderWidth: 1,\n          marginTop: 10,\n          marginBottom: 10,\n          padding: 5,\n        }}\n      />\n      <Button title=\"Send\" onPress={handleSendMessage} />\n    </View>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}